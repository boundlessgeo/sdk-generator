#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var mkdirp = require('mkdirp');
var readline = require('readline');
var path = require('path');
var sortedObject = require('sorted-object');

var pkg = require('../package.json');
var version = pkg.version;
var sdkversion = '1.0.2';

program
  .version(JSON.stringify({version: version, 'boundless-sdk': sdkversion}))
  .usage('[options] [dir]')
  .option('-f, --force', 'force on non-empty directory')
  .option('-d, --debug', 'output more debug info')
  .parse(process.argv);

main();

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

function ensureDirectoryExistence(filePath) {
  var dirname = path.dirname(filePath);
  if (fs.existsSync(dirname)) {
    return true;
  }
  ensureDirectoryExistence(dirname);
  fs.mkdirSync(dirname);
}

function write(path, str, mode, flag) {
  try {
    ensureDirectoryExistence(path);
    fs.writeFileSync(path, str, { flag: flag, mode: mode || 0666 });
  } catch(e) {
    if (program.debug) {
      console.log(e);
    }
  }
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

function createApplication(app_name, path) {
  var wait = 1;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = '$';
    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');
    console.log('     %s npm start', prompt);
    console.log();
  }

  var app = loadTemplate('js/app.js');
  var css = loadTemplate('css/app.css');
  var html = loadTemplate('html/index.html');
  var webpackDev = loadTemplate('js/webpack-dev-server.config.js');
  var webpack = loadTemplate('js/webpack-production.config.js');

  mkdir(path, function() {
    write(path + '/src/app/app.js', app, null, 'wx');
    var appContent = fs.readFileSync(path + '/src/app/app.js', 'utf-8');
    write(path + '/src/www/app.css', css, null, 'wx');
    write(path + '/src/www/index.html', html, null, 'wx');
    write(path + '/webpack-dev-server.config.js', webpackDev, null, 'wx');
    write(path + '/webpack-production.config.js', webpack, null, 'wx');
    // package.json
    var pkg = {
      name: app_name,
      version: '0.0.0',
      scripts: {
        'start': 'webpack-dev-server --config webpack-dev-server.config.js --progress --inline --colors',
        'build': 'webpack --config webpack-production.config.js --progress --colors'
      },
      dependencies: {
        '@boundlessgeo/sdk': sdkversion,
        'material-ui': '0.16.4',
        'react': '15.3.2',
        'react-dom': '15.3.2',
        'openlayers': '4.0.1',
        'react-intl': '2.1.5',
        'react-tap-event-plugin': '1.0.0'
      },
      devDependencies: {
        'babel-core': '^6.18.2',
        'babel-loader': '^7.0.0',
        'babel-preset-es2015': '^6.18.0',
        'babel-preset-react': '^6.16.0',
        'babel-preset-stage-2': '^6.18.0',
        'css-loader': '^0.28.2',
        'html-webpack-plugin': '^2.24.1',
        'style-loader': '^0.18.0',
        'transfer-webpack-plugin': '^0.1.4',
        'webpack': '^2.4.1',
        'webpack-dev-server': '^2.4.2'
      }
    }
    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));

    var shrinkwrap = {
      name: app_name,
      dependencies: {
        'jison': {
          'version': '0.4.17',
          'dependencies': {
            'escodegen': {
              'version': '1.8.1',
              'dependencies': {
                'source-map': {
                  'version': '0.5.6'
                }
              }
            }
          }
        }
      }
    };

    write(path + '/npm-shrinkwrap.json', JSON.stringify(shrinkwrap, null, 2));

    var babel = {
      presets: ["es2015", "react", "stage-2"]
    };

    write(path + '/.babelrc', JSON.stringify(babel, null, 2));

    complete();
  });
}

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

function main() {
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          process.exit(1);
        }
      });
    }
  });
}
