#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var mkdirp = require('mkdirp');
var readline = require('readline');
var path = require('path');
var sortedObject = require('sorted-object');

var pkg = require('../package.json');
var version = pkg.version;

program
  .version(version)
  .usage('[options] [dir]')
  .option('-f, --force', 'force on non-empty directory')
  .option('-d, --debug', 'output more debug info')
  .parse(process.argv);

main();

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

function write(path, str, mode, flag) {
  try {
    fs.writeFileSync(path, str, { flag: flag, mode: mode || 0666 });
  } catch(e) {
    if (program.debug) {
      console.log(e);
    }
  }
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

function createApplication(app_name, path) {
  var wait = 1;

  console.log();
  function complete() {
    if (--wait) return;
    var prompt = '$';
    console.log();
    console.log('   install dependencies:');
    console.log('     %s cd %s && npm install', prompt, path);
    console.log();
    console.log('   run the app:');
    console.log('     %s npm start', prompt);
    console.log();
  }

  var app = loadTemplate('js/app.jsx');
  var proxy = loadTemplate('json/proxy-config.json');
  var css = loadTemplate('css/app.css');
  var html = loadTemplate('html/index.html');
  var createbuild = loadTemplate('js/createbuild.js');
  var createpackage = loadTemplate('js/createpackage.js');
  var debugserver = loadTemplate('js/debug-server.js');

  mkdir(path, function() {
    write(path + '/app.jsx', app, null, 'wx');
    var appContent = fs.readFileSync(path + '/app.jsx', 'utf-8');
    write(path + '/app.css', css, null, 'wx');
    write(path + '/createbuild.js', createbuild);
    write(path + '/createpackage.js', createpackage);
    write(path + '/debug-server.js', debugserver);
    write(path + '/index.html', html, null, 'wx');
    write(path + '/proxy-config.json', proxy);
    // package.json
    var pkg = {
      name: app_name,
      version: '0.0.0',
      scripts: {
        'createdir': 'node createbuild.js',
        'start:debug': 'node debug-server.js',
        'start': 'node_modules/.bin/npm-run-all createdir start:debug',
        'start:proxy': 'node_modules/.bin/json-http-proxy -p 4000',
        'build:js': 'node_modules/.bin/browserify -g [envify --NODE_ENV production] -p [minifyify --no-map --exclude node_modules/openlayers/dist/ol.js] app.jsx -o build/app.js',
        'build': 'node_modules/.bin/npm-run-all createdir build:js',
        'createzip': 'node createpackage.js',
        'package': 'node_modules/.bin/npm-run-all build createzip'
      },
      dependencies: {
        'boundless-sdk': '^0.9.0',
        'material-ui': '^0.16.1',
        'react': '^15.3.2',
        'react-dom': '^15.3.2',
        'openlayers': '3.19.0',
        'react-intl': '^2.1.5',
        'react-tap-event-plugin': '^1.0.0'
      },
      devDependencies: {
        'archiver': '0.21.0',
        'babel-plugin-react-intl': '1.0.0',
        'babelify': '^6.0.2',
        'browserify': '^11.2.0',
        'cssify': '^0.8.0',
        'envify': '^3.4.0',
        'fs-extra': '0.26.2',
        'json-http-proxy': '^1.0.0-BETA-3',
        'minifyify': '^7.1.0',
        'npm-run-all': '1.3.1',
        'readline': '1.3.0',
        'replacestream': '4.0.0',
        'boundless-sdk-tools': '^0.9.0',
        'through': '^2.3.8',
        'watchify': '^3.2.0'
      },
      'browserify': {
        'transform': [
          'cssify',
          'babelify'
        ]
      }
    }
    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    // write files
    write(path + '/package.json', JSON.stringify(pkg, null, 2));

    complete();
  });
}

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

function main() {
  var destinationPath = program.args.shift() || '.';

  // App name
  var appName = path.basename(path.resolve(destinationPath));

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          process.exit(1);
        }
      });
    }
  });
}
